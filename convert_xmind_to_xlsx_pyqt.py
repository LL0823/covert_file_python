#!/usr/bin/env python
# -*- coding:utf-8 -*-
# author: liu
# time: 2024/6/11 20:25
# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys


from PyQt5.QtGui import QIcon

from xmind_to_xlsx import run
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QDialog, QFileDialog


def get_resource_path(relative_path):
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)

class Ui_Dialog(object):
    """
    使用pyqt5-tools生成的界面代码
    """
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 320)
        Dialog.setWindowIcon(QIcon(get_resource_path('res/yaya.ico')))
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(20, 60, 371, 231))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.textEdit = QtWidgets.QTextEdit(self.groupBox)
        self.textEdit.setGeometry(QtCore.QRect(20, 60, 331, 161))
        self.textEdit.setObjectName("textEdit")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(20, 30, 331, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setGeometry(QtCore.QRect(20, 10, 331, 16))
        self.checkBox.setObjectName("checkBox")
        self.button_choice = QtWidgets.QPushButton(Dialog)
        self.button_choice.setGeometry(QtCore.QRect(100, 30, 75, 23))
        self.button_choice.setObjectName("button_choice")
        self.button_cover = QtWidgets.QPushButton(Dialog)
        self.button_cover.setGeometry(QtCore.QRect(200, 30, 75, 23))
        self.button_cover.setObjectName("button_cover")

        self.retranslateUi(Dialog)
        self.button_choice.clicked.connect(Dialog.choice_file)  # type: ignore
        self.button_cover.clicked.connect(Dialog.cover_xmind_to_xlsx)  # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "convert xmind to xlsx"))
        self.button_choice.setText(_translate("Dialog", "选择文件"))
        self.button_cover.setText(_translate("Dialog", "转换成xlsx"))
        self.checkBox.setText(_translate("Dialog", "勾选后合并前两列单元格"))


class MainDialog(QDialog):
    def __init__(self, parent=None):
        super(QDialog, self).__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.file_path = ""

    def choice_file(self):
        self.file_path, _ = QFileDialog.getOpenFileName(self, "选择文件", "", "All Files (*)")
        self.ui.lineEdit.setText(self.file_path)

    def cover_xmind_to_xlsx(self):
        self.output_to_console('开始将xmind转换成excel了\n')
        self.output_to_console(f'文件路径为：{self.file_path}\n')
        # 判断选择的文件是否为xmind格式，如果不是直接提示。
        if self.file_path.endswith(".xmind") is False:
            self.output_to_console('选择的文件不是xmind格式，请重新选择\n')
            self.output_to_console('======================================\n')
            return
        excel_path = run(self.file_path, self.ui.checkBox.isChecked())
        self.output_to_console(f'生成的excel文件路径为：{excel_path}\n')
        self.output_to_console('======================================\n')

    def output_to_console(self, new_text):
        self.ui.textEdit.append(new_text)


if __name__ == '__main__':
    myapp = QApplication(sys.argv)
    myDlg = MainDialog()
    myDlg.show()
    sys.exit(myapp.exec_())
